ðŸ›’ SQL Questions on E-Commerce Dataset

ðŸ“Š Tables Used:

1. Customers
(customer_id, name, email, city, signup_date)


2. Orders
(order_id, customer_id, order_date, total_amount, payment_method)


3. Order_Items
(order_item_id, order_id, product_id, quantity, price)


4. Products
(product_id, product_name, category, price)




---

âœ… Q1. List all customers who have placed at least one order.

SELECT DISTINCT c.customer_id, c.name
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id;


---

âœ… Q2. Find the total number of orders placed in each city.

SELECT c.city, COUNT(o.order_id) AS total_orders
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.city;


---

âœ… Q3. Show the top 5 highest-value orders.

SELECT order_id, total_amount
FROM Orders
ORDER BY total_amount DESC
LIMIT 5;


---

âœ… Q4. Calculate the total revenue generated by each product.

SELECT p.product_name, SUM(oi.quantity * oi.price) AS revenue
FROM Order_Items oi
JOIN Products p ON oi.product_id = p.product_id
GROUP BY p.product_name
ORDER BY revenue DESC;


---

âœ… Q5. List customers who have never placed any orders.

SELECT c.customer_id, c.name
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;


---

âœ… Q6. Find the most popular product by quantity sold.

SELECT p.product_name, SUM(oi.quantity) AS total_quantity
FROM Order_Items oi
JOIN Products p ON oi.product_id = p.product_id
GROUP BY p.product_name
ORDER BY total_quantity DESC
LIMIT 1;


---

âœ… Q7. Find average order value for each customer.

SELECT c.customer_id, c.name, AVG(o.total_amount) AS avg_order_value
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.name;


---

âœ… Q8. List the total revenue generated in the month of June 2025.

SELECT SUM(total_amount) AS june_revenue
FROM Orders
WHERE order_date BETWEEN '2025-06-01' AND '2025-06-30';


---

âœ… Q9. Find top 3 customers who spent the most.

SELECT c.name, SUM(o.total_amount) AS total_spent
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.name
ORDER BY total_spent DESC
LIMIT 3;


---

âœ… Q10. Get category-wise total revenue.

SELECT p.category, SUM(oi.quantity * oi.price) AS total_revenue
FROM Order_Items oi
JOIN Products p ON oi.product_id = p.product_id
GROUP BY p.category
ORDER BY total_revenue DESC;


---


