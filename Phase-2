âœ… Phase 2 â€“ Moderate Level SQL

Topics covered:
âœ” Aggregate functions
âœ” GROUP BY, HAVING
âœ” INNER JOIN, LEFT JOIN
âœ” BETWEEN, IN, IS NULL
âœ” Subqueries
âœ” String functions


ðŸ“˜ Topic 1: Aggregate Functions

These functions work on a group of rows:
COUNT() â€“ total number of rows
SUM() â€“ sum of a column
AVG() â€“ average
MAX(), MIN() â€“ maximum and minimum

ðŸ§©
Q1.1: Find the total number of students in the students table.
Answer:
SELECT COUNT(*) AS total_students FROM students;

Q1.2: Get the average salary of employees.
Answer:
SELECT AVG(salary) AS average_salary FROM employees;


ðŸ“˜ Topic 2: GROUP BY Clause

GROUP BY groups rows that have the same values into summary rows.

ðŸ§©
Q2.1: Get the number of employees in each department.
Answer:
SELECT department, COUNT(*) AS total_employees
FROM employees
GROUP BY department;

Q2.2: Find the total sales made by each salesman from the sales table.
Answer:
SELECT salesman_id, SUM(sale_amount) AS total_sales
FROM sales
GROUP BY salesman_id;


ðŸ“˜ Topic 3: HAVING Clause

HAVING is used to filter groups (used after GROUP BY), similar to WHERE for rows.

ðŸ§©
Q3.1: Show departments that have more than 5 employees.
Answer:
SELECT department, COUNT(*) AS emp_count
FROM employees
GROUP BY department
HAVING COUNT(*) > 5;

Q3.2: List products that have total sales more than 10000.
Answer:
SELECT product_id, SUM(sale_amount) AS total_sales
FROM sales
GROUP BY product_id
HAVING SUM(sale_amount) > 10000;

ðŸ”¹ WHERE	                     ðŸ”¸ HAVING

Used to filter rows before grouping or aggregation
Used to filter groups after aggregation

Cannot be used with aggregate functions like SUM()	
Can be used with aggregate functions like COUNT(), AVG()

Comes before GROUP BY in the SQL query	
Comes after GROUP BY in the SQL query

Works on individual records 
Works on aggregated/grouped data

Example: WHERE salary > 50000	
Example: HAVING COUNT(*) > 3


ðŸ“˜ Topic 4: INNER JOIN

INNER JOIN returns records with matching values in both tables.

ðŸ§© Questions & Answers:
Q4.1: Get student names and their course names by joining students and courses table using course_id.
Answer:
SELECT s.name, c.course_name
FROM students s
INNER JOIN courses c ON s.course_id = c.course_id;

Q4.2: Get all orders with customer names by joining orders and customers using customer_id.
Answer:
SELECT o.order_id, c.name
FROM orders o
INNER JOIN customers c ON o.customer_id = c.customer_id;


ðŸ“˜ Topic 5: LEFT JOIN
Explanation:
LEFT JOIN returns all rows from the left table, even if there's no match in the right table.

ðŸ§© Questions & Answers:
Q5.1: List all students and their assigned mentorâ€™s name (even if some students donâ€™t have a mentor).
Answer:
SELECT s.name, m.mentor_name
FROM students s
LEFT JOIN mentors m ON s.mentor_id = m.mentor_id;

Q5.2: Show all products and their sales (even products with no sales).
Answer:
SELECT p.name, s.sale_amount
FROM products p
LEFT JOIN sales s ON p.product_id = s.product_id;


ðŸ“˜ Topic 6: BETWEEN Operator
Explanation:
The BETWEEN operator filters values within a range, inclusive of both ends.
Syntax:
SELECT * FROM table_name WHERE column BETWEEN value1 AND value2;

ðŸ§© Questions & Answers:
Q6.1: Get students whose age is between 18 and 22.
Answer:
SELECT * FROM students WHERE age BETWEEN 18 AND 22;

Q6.2: Find products priced between â‚¹100 and â‚¹500.
Answer:
SELECT * FROM products WHERE price BETWEEN 100 AND 500;


ðŸ“˜ Topic 7: IN Operator
Explanation:
The IN operator checks whether a value matches any value in a list.
Syntax:
SELECT * FROM table_name WHERE column IN (value1, value2, ...);

ðŸ§© Questions & Answers:
Q7.1: Get employees working in departments 'HR', 'IT', or 'Finance'.
Answer:
SELECT * FROM employees WHERE department IN ('HR', 'IT', 'Finance');

Q7.2: Show orders placed by customers with IDs 101, 105, and 110.
Answer:
SELECT * FROM orders WHERE customer_id IN (101, 105, 110);


ðŸ“˜ Topic 8: IS NULL / IS NOT NULL
Explanation:
Used to check whether a column has no value (NULL) or has a value.

ðŸ§© Questions & Answers:
Q8.1: Find employees who donâ€™t have a manager assigned (i.e., manager_id is NULL).
Answer:
SELECT * FROM employees WHERE manager_id IS NULL;

Q8.2: List all students who have an email address (email is NOT NULL).
Answer:
SELECT * FROM students WHERE email IS NOT NULL;


ðŸ“˜ Topic 9: Subqueries (Basic)
Explanation:
A subquery is a query nested inside another query, often used with IN, =, >, etc.

ðŸ§© Questions & Answers:
Q9.1: Find names of customers who have placed an order.
Answer:
SELECT name
FROM customers
WHERE customer_id IN (SELECT customer_id FROM orders);

Q9.2: Get products whose price is more than the average price of all products.
Answer:
SELECT * FROM products
WHERE price > (SELECT AVG(price) FROM products);


ðŸ“˜ Topic 10: String Functions
Explanation:
Common string functions include:
UPPER() â€“ convert to uppercase
LOWER() â€“ convert to lowercase
LENGTH() â€“ number of characters
CONCAT() â€“ join strings

ðŸ§© Questions & Answers:
Q10.1: Get names of all students in uppercase.
Answer:
SELECT UPPER(name) AS upper_name FROM students;

Q10.2: Show full name of employees by joining first_name and last_name.
Answer:
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM employees;
