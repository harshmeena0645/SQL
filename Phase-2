âœ… Phase 2 â€“ Moderate Level SQL

Topics covered:
âœ” Aggregate functions
âœ” GROUP BY, HAVING
âœ” INNER JOIN, LEFT JOIN
âœ” BETWEEN, IN, IS NULL
âœ” Subqueries
âœ” String functions


ðŸ“˜ Topic 1: Aggregate Functions
These functions work on a group of rows:
COUNT() â€“ total number of rows
SUM() â€“ sum of a column
AVG() â€“ average
MAX(), MIN() â€“ maximum and minimum

Q1.1: Find the total number of students in the students table.
ðŸ‘‰ SELECT COUNT(*) AS total_students FROM students;

Q1.2: Get the average salary of employees.
ðŸ‘‰ SELECT AVG(salary) AS average_salary FROM employees;


ðŸ“˜ Topic 2: GROUP BY Clause
GROUP BY groups rows that have the same values into summary rows

Q2.1: Get the number of employees in each department.
ðŸ‘‰ SELECT department, COUNT(*) AS total_employees FROM employees GROUP BY department;

Q2.2: Find the total sales made by each salesman from the sales table.
ðŸ‘‰ SELECT salesman_id, SUM(sale_amount) AS total_sales FROM sales GROUP BY salesman_id;


ðŸ“˜ Topic 3: HAVING Clause
HAVING is used to filter groups (used after GROUP BY), similar to WHERE for rows.

Q3.1: Show departments that have more than 5 employees.
ðŸ‘‰ SELECT department, COUNT(*) AS emp_count FROM employees GROUP BY department HAVING COUNT(*) > 5;

Q3.2: List products that have total sales more than 10000.
ðŸ‘‰ SELECT product_id, SUM(sale_amount) AS total_sales FROM sales GROUP BY product_id HAVING SUM(sale_amount) > 10000;


ðŸ”¹ WHERE	                 ðŸ”¸ HAVING

Used to filter rows before grouping or aggregation
Used to filter groups after aggregation

Cannot be used with aggregate functions like SUM()	
Can be used with aggregate functions like COUNT(), AVG()

Comes before GROUP BY in the SQL query	
Comes after GROUP BY in the SQL query

Works on individual records 
Works on aggregated/grouped data

Example: WHERE salary > 50000	
Example: HAVING COUNT(*) > 3


ðŸ“˜ Topic 4: INNER JOIN
Returns records with matching values in both tables

Q4.1: Get student names and their course names by joining students and courses table using course_id.
ðŸ‘‰ SELECT s.name, c.course_name FROM students s INNER JOIN courses c ON s.course_id = c.course_id;


ðŸ“˜ Topic 5: LEFT JOIN
Returns all rows from the left table, even if there's no match in the right table.

Q5.1: List all students and their assigned mentorâ€™s name (even if some students donâ€™t have a mentor).
ðŸ‘‰ SELECT s.name, m.mentor_name FROM students s LEFT JOIN mentors m ON s.mentor_id = m.mentor_id;


ðŸ“˜ Topic 6: BETWEEN Operator
Filters values within a range, inclusive of both ends.
SELECT * FROM table_name WHERE column BETWEEN value1 AND value2;

Q6.1: Get students whose age is b/w 18 and 22.
SELECT * FROM students WHERE age BETWEEN 18 AND 22;


ðŸ“˜ Topic 7: IN Operator
Checks whether a value matches any value in a list.
SELECT * FROM table_name WHERE column IN (value1, value2, ...);

Q7.1: Get employees working in departments 'HR', 'IT', or 'Finance'.
SELECT * FROM employees WHERE department IN ('HR', 'IT', 'Finance');


ðŸ“˜ Topic 8: IS NULL / IS NOT NULL
Used to check whether a column has no value (NULL) or has a value.

8.1: Find employees who donâ€™t have a manager assigned (i.e., manager_id is NULL).
SELECT * FROM employees WHERE manager_id IS NULL;

8.2: List all students who have an email address (email is NOT NULL).
SELECT * FROM students WHERE email IS NOT NULL;


ðŸ“˜ Topic 9: Subqueries (Basic)
A subquery is a query nested inside another query, often used with IN, =, >, etc.

9.1: Find names of customers who have placed an order.
SELECT name FROM customers WHERE customer_id IN (SELECT customer_id FROM orders);

9.2: Get products whose price is more than the average price of all products.
SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products);


ðŸ“˜ Topic 10: String Functions
Common string functions include:
UPPER() â€“ convert to uppercase
LOWER() â€“ convert to lowercase
LENGTH() â€“ number of characters
CONCAT() â€“ join strings

10.1:Get names of all students in uppercase.
SELECT UPPER(name) AS upper_name FROM students;

10.2: Show full name of employees by joining first_name and last_name.
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM employees;
